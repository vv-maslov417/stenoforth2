stenoforth32

РАСШИРЕНИЕ СИНТАКСИСА

1. Статические локальные переменные различных типов.
Эти переменные находятся в статической памяти, удаленной от памяти программ,
с целью исключения затирания кэш-памяти.
- переменные в формате фикс.точка 32 разряда, обозначаются при инициализации name\
- переменные в формате фикс.точка 32 разряда в пользовательской области памяти, 
  обозначаются при инициализации name%
- переменные в формате фикс.точка 64 разряда, обозначаются при инициализации name!d
- переменные в формате плав.точка 64 разряда, обозначаются при инициализации name$
- переменные в формате плав.точка 32 разряда в пользовательской области памяти,
  обозначаются при инициализации name;
- переменные-векторы(аналоги глобальных векторов), обозначаются при инициализации name^ 
При использовании переменных суффиксы \ % !d $ ; ^ опускаются
Имя переменной кладет свое содержимое на стек параметров( как value )   
Присвоение всем переменным данных со стека обозначается словом -> (аналог TO)  
Переменные из пользовательской области области памяти могут быть использованы
при создании многозадачных приложений в отличие от остальных локальных переменных.
Скобки | ... | при инициализации локальных переменных нужны для присвоения переменным 
значений в том же порядке в каком расположены параметры на стеке.
: foo 1 2 3e 4e 5. | a\ b% c$ d; e!d | ... ;
a будет присвоено значение 1, b 2, с 1e, d 2e, e 5. .
Если присвоение не групповое а одиночное, 5 а\  5e b$ скобки не обязательны.
Внутри определения через двоеточие можно в любом месте текста определения
заводить локальные переменные, как одиночно, так и группой. 
Имя каждой из таких переменных должно быть уникальным в определении( в следующих  определениях 
эти имена могут повторяться). Кроме этого имена локальных переменных не должны совпадать 
с именами в словаре Forth( в дальнейшем будут называться глобальными именами).
Исходя из сказанного локальные имена дб короткими 1-2 символа. Если локальное имя будет
совпадать с глобальным на этапе компиляции определения будет выдано сообщении о таком
совпадении. Все это справедливо и для других локальных имен(для макросов, слов, 
именованных строк, векторов, модификаторов функций).   

2. Определение макросов

m: name .... ;

здесь:
name - имя макроса
.... - форт-текст, который может включать и имена ранее определенных макросов.

3. Определение локальных макросов

: name
  ....
  name1[ .... ]
  ....
  name2[ .... name1 .... ]
  name2
  ....
  name1
  ....
;
здесь:
name1 - имя локального макроса
.... - форт-текст, который может включать и имена как ранее определенных макросов так и
как ранее, так и позднее определенных локальных макросов.
Имена локальных макросов видны только внутри определения, в котором они определены.

4. Определение локальных слов

: name
  ....
  name1( .... )
  ....
  name2( .... name1 .... )
  name2
  ....
  name1
  ....
;
здесь:
name1, name2 - имена локальных слов
.... - форт-текст, который может включать и имена ранее определенных макросов и слов
так и ранее определенных локальных макросов и слов.
Имена локальных слов видны только внутри определения, в котором они определены.

Для получения исполнительного адреса локального слова внутри определения:
: name
 ....
 l' name1 \ -- xt   или `name \ -- xt
 name2( .... x) \ -- xt \ здесь name2 - не используется в дальнейшем
;
Этот адрес может быть передан через стек данных после исполнения слова name
для исполнения внутреннего слова name1 c помощью execute.
ДЛЯ ЛОКАЛЬНЫХ МАКРОСОВ ТАКОЙ СПОСОБ ИСПОЛЬЗОВАТЬ НЕЛЬЗЯ.

Для использования рекурсии в локальных словах есть слово recloc, эквивалентное слову resurse
для глобальных слов. 
: foo ... name( ... recloc ... ) ... name ... ;
Cлово recloc генерирует код вызова слова name из самого кода локального имени name
( call addr ), где addr это xt локального слова name.

5. Определение именованных строк

t: name .... ;
здесь:
name - имя строки
.... - символы строки

name кладет на стек адрес первого символа строки и длину строки в байтах без завершающего
строку 0-го байта, байта-счетчика байтов у таких строк нет, поэтому длина строки не имеет
ограничеия по длине в 256 байт.
  Особенностью таких строк является минимизация количества пробелов в их непрерывных 
последовательностях в строке и удаление символов перевода строк, 
например определение строки с именем string1 даст в итоге строку с минимумом пробелов.

t: string1 12345   89798
jkbbhn     uyggu
654
;

string1 type ( 12345 89798 jkbbhn uyggu 654 )

6. Определение локальных именованных строк

: name
  ....
  name1" ....
  ....
  .... "
  ....
  name1
  ....
;
здесь:
name1 - имя локальной строки
.... - символы строки
После символа " и перед завершающим строку символом " должен быть пробел
Локальные строки ведут себя аналогично именованным строкам.

7. Создание группы слов глобальной видимости(помещаются в словарь Forth) с доступом каждого последующего 
глобального слова в группе к локальным переменным и словам всех предыдущих определений глобальных слов группы.

: name1 | v1\  v2$  v3% v4; |
  name2[ .... ]
  name3( .... )
  name4" .... "
........
;
+: name5 ... \ по слову +: в группу добавляются слова глобальной видимости 
   name6[ name2 name3 ...  5e -> v2 ... ]
   name7( 2 -> v1 ..  name4 ... )
........
;
+: name8
   name7 ..... 12,123 -> v4
....
;
: name9 .... ;
Формирование группы заканчиваеся по первому символу ':' без плюса

Пример: Арифметические операции над группой чисел

: IniGrAr
gt[ NextWord number? if drop ]
bo[ gt else 2drop exit then begin gt ]
eo[ else 2drop state @ if lit, then exit then again ]
;

+: (+ bo +  eo ; immediate
+: (- bo -  eo ; immediate
+: (* bo *  eo ; immediate
+: (/ bo /  eo ; immediate

: foo
(+ 56 44 -10 1 )
(- 56 44 -10 1 )
(* 20 3 -4 5 -6 )
(/ 240 2 3 -2 5 )
;

foo .s

лог
91 21 7200 4294967292(-4)

8. Литеральные имена
Лексемы, которыми обозначают имена слов в Forth обычно являются только метками(идентификаторами),
то есть при формировании определенного кода его можно связать с произвольным именем.
Литеральное имя(лексема) содержит информацию, по которой его код будет сформирован и/или исполнен, и по сути является
входом в программу формирования и/или исполнения определенного кода. Как пример литеральных имен в Forth можно
привести лексемы чисел различного формата(десятичные, шестнадцатиричные)
Примеры:
лексемы вида n\abc..z
где  n цифра(от 1 до 5 включительно) указывает, что лексема будет работать с верхними n числами с фикс. точкой на стеке данных,
нумерация которых будет, например, при n = 5   1 2 3 4 5(5 - на вершине стека), а  a b c .. z цифры от 1 до n (максимум 16 цифр)
и в результате исполнения такого литерального имени на стеке будет определенный таким именем набор чисел из исходного набора чисел.
Например литеральное имя 5\543211223341 после его исполнения изменит стек с 1 2 3 4 5 до 5 4 3 2 1 1 2 2 3 3 4 1 
Нельзя использовать литеральные имена одинаковые с обычными именами в одном контексте поиска, так как поиск имен закончится на обычном имени, 
а литеральное имя не будет найдено. 
  Для создания литеральных имен можно использовать конструкцию rec: ... gen: ... ;
часть rec: ... используется для опознавания имени литеральной лексемы, для этого используются
две встроенных переменных a - адрес первого символа лексемы, u - длина лексемы в байтах,
и два слова p>c ( pos -- char ) выдает код символа в заданной позиции лексемы, начальная позиция начинается с 1
и pc? ( pos char -- flag ) выдает флаг true если в заданной позиции pos находится заданный код символа char. 
Если лексема опознана, то на стек должно быть положено true, в противном случае false.
Если true, то осуществляется переход в часть gen: .... ; , в которой формируется
код, соответствующий функционалу, заложенному в литеральное имя лексемы.    

пример: литеральное имя 'n*' - n цифра от 3 до 9, * - знак умножения, функционал - умножить число на стеке на n 
rec: 1 p>c '3' '9' 1+ within 2 p>c '*' = and u 2 = and 
gen: a c@ '0' - state @ if lit, ` * else * then ;

Использование
10 6* .
: s2 30 8* ; s2 . cr
( 60  240 ) Ok

9. Односимвольные слова ДЛЯ БЫСТРОГО СОЗДАНИЯ ОПРЕДЕЛЕНИЙ СЛОВ В КРАТКОЙ ФОРМЕ

Набор символов контекста слов одинарной разрядности с фиксированной точкой
и символы выбора контекстов слов и статических переменных всех типов

символ  слово    символ  слово     символ  слово
a       abs      A       again     !       !
b       c@       B       begin     "       Контекст слов двойной разрядности с фиксированной точкой
c       emit     C       case      #       <>
d       dup      D       ?do       $       Контекст статических локальных переменных разрядности 64 с плавающей точкой
e       else     E       endcase   %       mod
f       endof    F       fill      &       and
g       rnd      G       ado       '       Не используется
h       here     H       within    (       Не используется
i       1+       I       i         )       Не используется
j       1-       J       j         *       *
k       key      K       compare   +       +
l       lshift   L       loop      ,       Контекст статических локальных переменных с плавающей точкой
m       min      M       max       -       -
n       negate   N       +loop     .       Не используется
o       of       O       erase     /       /
p       depth    P       randomize :       Контекст статических многопоточных локальных переменных одинарной разрядности с фиксированной точкой
q       sqrt     Q       leave     ;       Контекст статических многопоточных локальных переменных с плавающей точкой
r       rshift   R       repeat    <       <
s       i+       S       search    =       =
t       then     T       true      >       >
u       evaluate U       until     ?       if
v       резерв   V       move      @       @
w       c!       W       while     [       Контекст слов одинарной разрядности с фиксированной точкой
x       drop     X       execute   \       Контекст локальных переменных с фиксированной точкой одинарной разрядности
y       0        Y       1         ]       Не используется
z       0<>      Z       0=        ^       xor
                                   _       allot
                                   `       Не используется
                                   {       Контекст слов с плавающей точкой
                                   |       or
                                   }       Не используется
                                   ~       invert
                                   :       ->    Используется как TO для стат. переменных всех типов в контекстах слов всех типов
                                   !d      Контекст статических локальных переменных двойной разрядности с фиксированной точкой

( n1 n2 - n1*n1+n2*n2 ) - сумма квадратов двух чисел с фикс. точкой
: primer1 \12 [11*22*+ ;  \ вместо \12 можно написать |2 - актуально когда много переменных -> |8 вместо \12345678

\ - переход в контекст локальных переменных одинарной разрядности с фикс. точкой однопоточных 
1 2 - лок. переменные n1 n2 ( максимальное количество таких переменных - 9 )
пробел - переход в базовый контекст FORTH
[ - переход в контекст слов одинарной разрядности с фиксированной точкой однопоточных и многопоточных

( n1 n2 - n1*n1+n2*n2 ) - сумма квадратов двух чисел с плав. точкой
: primer2 $12 {11*22*+ ; \ вместо {12 можно написать |$2 - актуально когда много переменных -> |$8 вместо $12345678

$ - переход в контекст локальных переменных разрядности 64 с плав. точкой однопоточных 
1 2 - лок. переменные n1 n2 ( максимальное количество таких переменных - 9 )
пробел - переход в базовый контекст FORTH
{ - переход в контекст слов разрядности 64 с плавающей точкой 

( n1 n2 - n1*n1+n2*n2 ) - сумма квадратов двух чисел с плав. точкой
: primer3 ;12 {11*22*+ ; \ вместо ;12 можно написать |;2 - актуально когда много переменных -> |;8 вместо ;12345678

; - переход в контекст локальных переменных разрядности 32 с плав. точкой многопоточных 
1 2 - лок. переменные n1 n2 ( максимальное количество таких переменных - 9 )
пробел - переход в базовый контекст FORTH
{ - переход в контекст слов разрядности 32 с плавающей точкой 

( n1 n2 - n1*n1+n2*n2 ) - сумма квадратов двух чисел с фикс. точкой
: primer4 %12 [11*22*+ ;  \ вместо %12 можно написать |%2 - актуально когда много переменных -> |%8 вместо %12345678

% - переход в контекст локальных переменных одинарной разрядности с фикс. точкой многопоточных 
1 2 - лок. переменные n1 n2 ( максимальное количество таких переменных - 9 )
пробел - переход в базовый контекст FORTH
[ - переход в контекст слов одинарной разрядности с фиксированной точкой однопоточных и многопоточных

Набор символов контекста слов двойной разрядности с фиксированной точкой 
слов вывода и часто используемых слов

символ  слово    символ  слово           символ  слово
a       dabs     A       allocate        !       2!
b       w@       B       .0b             "       резерв
c       emit     C       резерв          #       d<>
d       2dup     D       ?do             $       резерв
e       else     E       Не используется %       dmod
f       f>d      F       free throw      &       dand
g       резерв   G       ado             '       Не используется
h       here     H       .0h             (       Не используется
i       1+!      I       I               )       Не используется
j       1-!      J       J               *       d*
k       резерв   K       резерв          +       d+
l       dlshift  L       loop            ,       Не используется
m       dmin     M       dmax            -       d-
n       dnegate  N       +loop           .       d.
o       recloc   O       .0              /       d/
p       depth    P       NextWord        :       ->
q       sqrt     Q       резерв          ;       exit
r       drshift  R       resize throw    <       d<
s       space    S       резерв          =       d=
t       then     T       type            >       d>
u       evaluate U       резерв          ?       if
v       резерв   V       move            @       2@
w       w!       W       резерв          [       Не используется
x       2drop    X       резерв          \       cr
y       0.       Y       1.              ]       Не используется
z       d0<>     Z       d0=             ^       dxor
                                         _       .bl
                                         `       Не используется
                                         {       Не используется
                                         |       dor
                                         }       Не используется
                                         ~       dinvert

\ n1 n2 - n1*n1+n2*n2  - сумма квадратов чисел с фикс. точкой дв. разр-ти
: primer3 !d12 "11*22*+ ; \ вместо !d12 можно написать |d2 - актуально когда много переменных -> |d8 вместо !d12345678

!d - переход в контекст локальных переменных двойной разрядности с фикс. точкой однопоточных
1 2 - лок. переменные n1 n2 ( максимальное количество таких переменных - 9 )
пробел - переход в базовый контекст FORTH
" - переход в контекст слов двойной разрядности с фиксированной точкой

Набор символов контекста слов для работы с данными с плавающей точкой разрядности 64 
Слова структур управления продублированы в этом контексте чтобы не переключать контекст
при их использования.

символ  слово    символ  слово    символ  слово
a       FABS     A       AGAIN    @       F@
b       FLOG2    B       BEGIN    !       F!
c       FCOS     C       CASE     +       F+
d       FDUP     D       ?DO      -       F-
e       ELSE     E       ENDCASE  *       F*
f       DS>F     F       D>F      /       F/
g       FLOG     G       aDO      =       F=
h       HERE     H       резерв   #       F<>
i       F1+      I       I        ?       IF
j       F1-      J       J        <       F<
k       FACOS    K       резерв   >       F>
l       FLN      L       LOOP     ~       F~
m       FMIN     M       FMAX     ^       F**
n       FNEGATE  N       +LOOP    .       F.
o       FDEPTH   O       FDEPTH   :       ->
p       F**2     P       FPI      ;       EXIT
q       FSQRT    Q       LEAVE
r       FASIN    R       REPEAT
s       FSIN     S       F>DS
t       THEN     T       FTAN
u       FATAN    U       UNTIL
v       резерв   V       резерв
w       резерв   W       WHILE
x       FDROP    X       EXP
y       0        Y       1
z       F0<>     Z       F0=

Пример:
Площадь треугольника по формуле Герона:
: S3 \ a b c -- S
  0e |$4 {12+3+ 2e {/:441-42-*43-*4*q. ;

  В наборах символов слов используютя наиболее часто употребляемые слова.
В случае если нужно слово, отсутсвующее в этих наборах, просто через пробелы 
вставляется имя этого слова, после чего надо обозначить контекст продолжения 
цепочки символов в определении. Также вставляются непосредственные значения чисел
и другие литеральные имена.

пример: 
: foo 55555e 66666e $12 {11*22*+  f>d  ". ; \ слово f>d отсутствует в наборах символов
foo ( 7530713581) 

10. Подсчет времени исполнения слов.
Конструкция 'seet name' выдаст время исполнения слова name.
Если слово name берет аргументы со стека, то необходимо оформить тестовое слово,
в котором эти аргументы перед исполнением слова присутствуют на стеке.
В результате исполнения слова на стек могут положены какие-то данные.
В этом случае эти данные необходимо убрать со стека. 

Пример:
 : ssq | a\ b\ | a a * b b * + ; \ слово ssq забирает со стека два числа и кладет на стек после исполнения одно число
 : test 1 2 ssq drop ;           \ заданы входные аргументы, результат дб удален со стека в конце теста
 seet test

test                              \ имя слова
p1=2 p2=2                         \ номера ядер процессора разового прогона теста в начале теста(p1) и в конце теста(p2)
dT1 = 9216 tics 0 ms 2 us 560 ns  \ значение времени при разовом прогоне теста
p1=6 p2=6                         \ номера ядер процессора при 5-ти кратном прогоне теста в начале 1-го прогона(p1) и в конце 5 прогона(p2)
dTc = 92 tics 0 ms 0 us 25 ns     \ среднее арифметическое время одного прогона при 5-ти прогонах теста

Для корректной оценки времен исполнения слов, необходимо в определении слова SEET записать тактовую частоту вашего процессора
(в файле ...\~stenoforth2\lib\seetl.f) в 12 и 26 строках ( tics 10. D* 36. D/ -> ns ). Здесь 36. это тактовая частота 3,6 Ггц
моего процессора, записанная в формате двойной разрядности.

11. Встроенный ассемблер 
( исходники в файлах каталога \spf429\devel\~stenoforth2\assm\ и в файле \spf429\devel\~stenoforth2\lib\instructions.f)

